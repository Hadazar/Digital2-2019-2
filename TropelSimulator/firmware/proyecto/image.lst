
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000054  000004b0  000004b0  00000504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00000504  00000504  00000558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000514  00000514  00000568  2**2
                  ALLOC
  4 .debug_frame  00000148  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000730  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034d  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000190  00000000  00000000  0000112d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  000012bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000771  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000024f  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001d25  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 ec 	calli 47c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 20 	ori gp,gp,0x520
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 14 	ori r1,r1,0x514
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 05 98 	ori r3,r3,0x598

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"



int main(){
 208:	37 9c ff f8 	addi sp,sp,-8
 20c:	5b 8b 00 08 	sw (sp+8),r11
 210:	5b 9d 00 04 	sw (sp+4),ra
    
//writeGpio(0b00000111);
//isr_init();  //Limpia los procedimientos de todas las interrupciones.
irq_enable(); 
 214:	fb ff ff cb 	calli 140 <irq_enable>
irq_set_mask(26); //00.....0000011010 habilita interrupciones del timmer y la del
 218:	34 01 00 1a 	mvi r1,26
 21c:	fb ff ff cf 	calli 158 <irq_set_mask>

//uart_init();

uint32_t i=0;
 220:	34 0b 00 00 	mvi r11,0
uint32_t c=0;
while(1){

i=i+1;
uart_putchar('a');
 224:	34 01 00 61 	mvi r1,97
i=i+1;
 228:	35 6b 00 01 	addi r11,r11,1
uart_putchar('a');
 22c:	f8 00 00 6a 	calli 3d4 <uart_putchar>

writeGpio(i);
 230:	b9 60 08 00 	mv r1,r11
 234:	f8 00 00 86 	calli 44c <writeGpio>
 238:	e3 ff ff fb 	bi 224 <main+0x1c>

0000023c <tic_isr>:
     } while ( ! (tcr & TIMER_TRIG) );
}

void tic_isr()
{
    tic_msec++;
 23c:	78 01 00 00 	mvhi r1,0x0
 240:	38 21 04 b0 	ori r1,r1,0x4b0
 244:	28 22 00 00 	lw r2,(r1+0)
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 248:	78 04 00 00 	mvhi r4,0x0
 24c:	38 84 04 b4 	ori r4,r4,0x4b4
 250:	28 83 00 00 	lw r3,(r4+0)
    tic_msec++;
 254:	28 41 00 00 	lw r1,(r2+0)
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 258:	28 63 00 00 	lw r3,(r3+0)
    tic_msec++;
 25c:	34 21 00 01 	addi r1,r1,1
 260:	58 41 00 00 	sw (r2+0),r1
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 264:	34 01 00 0e 	mvi r1,14
 268:	58 61 00 00 	sw (r3+0),r1
}
 26c:	c3 a0 00 00 	ret

00000270 <isr_null>:
 270:	c3 a0 00 00 	ret

00000274 <isr_init>:
    for(i=0; i<32; i++)
 274:	78 02 00 00 	mvhi r2,0x0
 278:	38 42 04 b8 	ori r2,r2,0x4b8
 27c:	28 41 00 00 	lw r1,(r2+0)
 280:	78 02 00 00 	mvhi r2,0x0
 284:	38 42 04 bc 	ori r2,r2,0x4bc
 288:	28 43 00 00 	lw r3,(r2+0)
 28c:	34 22 00 80 	addi r2,r1,128
        isr_table[i] = &isr_null;
 290:	58 23 00 00 	sw (r1+0),r3
 294:	34 21 00 04 	addi r1,r1,4
    for(i=0; i<32; i++)
 298:	5c 22 ff fe 	bne r1,r2,290 <isr_init+0x1c>
}
 29c:	c3 a0 00 00 	ret

000002a0 <isr_register>:
    isr_table[irq] = isr;
 2a0:	78 04 00 00 	mvhi r4,0x0
 2a4:	38 84 04 c0 	ori r4,r4,0x4c0
 2a8:	28 83 00 00 	lw r3,(r4+0)
 2ac:	3c 21 00 02 	sli r1,r1,2
 2b0:	b4 61 18 00 	add r3,r3,r1
 2b4:	58 62 00 00 	sw (r3+0),r2
}
 2b8:	c3 a0 00 00 	ret

000002bc <isr_unregister>:
    isr_table[irq] = &isr_null;
 2bc:	78 03 00 00 	mvhi r3,0x0
 2c0:	38 63 04 c4 	ori r3,r3,0x4c4
 2c4:	28 62 00 00 	lw r2,(r3+0)
 2c8:	3c 21 00 02 	sli r1,r1,2
 2cc:	78 03 00 00 	mvhi r3,0x0
 2d0:	38 63 04 c8 	ori r3,r3,0x4c8
 2d4:	b4 41 10 00 	add r2,r2,r1
 2d8:	28 61 00 00 	lw r1,(r3+0)
 2dc:	58 41 00 00 	sw (r2+0),r1
}
 2e0:	c3 a0 00 00 	ret

000002e4 <msleep>:
    timer0->compare1 = (FCPU/1000)*msec;
 2e4:	78 03 00 00 	mvhi r3,0x0
 2e8:	38 02 86 a0 	mvu r2,0x86a0
 2ec:	78 42 00 01 	orhi r2,r2,0x1
 2f0:	38 63 04 cc 	ori r3,r3,0x4cc
 2f4:	88 22 08 00 	mul r1,r1,r2
 2f8:	28 62 00 00 	lw r2,(r3+0)
 2fc:	28 42 00 00 	lw r2,(r2+0)
 300:	58 41 00 10 	sw (r2+16),r1
    timer0->counter1 = 0;
 304:	58 40 00 14 	sw (r2+20),r0
    timer0->tcr1 = TIMER_EN;
 308:	34 01 00 08 	mvi r1,8
 30c:	58 41 00 0c 	sw (r2+12),r1
         tcr = timer0->tcr1;
 310:	28 41 00 0c 	lw r1,(r2+12)
     } while ( ! (tcr & TIMER_TRIG) );
 314:	20 21 00 01 	andi r1,r1,0x1
 318:	44 20 ff fe 	be r1,r0,310 <msleep+0x2c>
}
 31c:	c3 a0 00 00 	ret

00000320 <nsleep>:
    timer0->compare1 = (FCPU/1000000)*nsec;
 320:	78 03 00 00 	mvhi r3,0x0
 324:	38 63 04 d0 	ori r3,r3,0x4d0
 328:	28 62 00 00 	lw r2,(r3+0)
 32c:	08 21 00 64 	muli r1,r1,100
 330:	28 42 00 00 	lw r2,(r2+0)
 334:	58 41 00 10 	sw (r2+16),r1
    timer0->counter1 = 0;
 338:	58 40 00 14 	sw (r2+20),r0
    timer0->tcr1 = TIMER_EN;
 33c:	34 01 00 08 	mvi r1,8
 340:	58 41 00 0c 	sw (r2+12),r1
         tcr = timer0->tcr1;
 344:	28 41 00 0c 	lw r1,(r2+12)
     } while ( ! (tcr & TIMER_TRIG) );
 348:	20 21 00 01 	andi r1,r1,0x1
 34c:	44 20 ff fe 	be r1,r0,344 <nsleep+0x24>
}
 350:	c3 a0 00 00 	ret

00000354 <tic_init>:
void tic_init()
{
    tic_msec = 0;

    // Setup timer0.0
    timer0->compare0 = (FCPU/10000);
 354:	78 02 00 00 	mvhi r2,0x0
 358:	38 42 04 d4 	ori r2,r2,0x4d4
 35c:	28 41 00 00 	lw r1,(r2+0)
    tic_msec = 0;
 360:	78 03 00 00 	mvhi r3,0x0
    timer0->compare0 = (FCPU/10000);
 364:	34 02 27 10 	mvi r2,10000
 368:	28 21 00 00 	lw r1,(r1+0)
    tic_msec = 0;
 36c:	38 63 04 d8 	ori r3,r3,0x4d8
    timer0->compare0 = (FCPU/10000);
 370:	58 22 00 04 	sw (r1+4),r2
    tic_msec = 0;
 374:	28 62 00 00 	lw r2,(r3+0)
    timer0->counter0 = 0;
 378:	58 20 00 08 	sw (r1+8),r0
    isr_table[irq] = isr;
 37c:	78 03 00 00 	mvhi r3,0x0
    tic_msec = 0;
 380:	58 40 00 00 	sw (r2+0),r0
    timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 384:	34 02 00 0e 	mvi r2,14
 388:	58 22 00 00 	sw (r1+0),r2
    isr_table[irq] = isr;
 38c:	78 02 00 00 	mvhi r2,0x0
 390:	38 42 04 dc 	ori r2,r2,0x4dc
 394:	38 63 04 e0 	ori r3,r3,0x4e0
 398:	28 41 00 00 	lw r1,(r2+0)
 39c:	28 62 00 00 	lw r2,(r3+0)
 3a0:	58 22 00 04 	sw (r1+4),r2

    isr_register(1, &tic_isr);
}
 3a4:	c3 a0 00 00 	ret

000003a8 <uart_init>:
    //uart0->lcr = 0x03;  // Line Control Register:    8N1
    //uart0->mcr = 0x00;  // Modem Control Register

    // Setup Divisor register (Fclk / Baud)
    //uart0->div = (FCPU/(57600*16));
}
 3a8:	c3 a0 00 00 	ret

000003ac <uart_getchar>:

char uart_getchar()
{   
    while (! (uart0->ucr & UART_DR)) ;
 3ac:	78 02 00 00 	mvhi r2,0x0
 3b0:	38 42 04 e4 	ori r2,r2,0x4e4
 3b4:	28 41 00 00 	lw r1,(r2+0)
 3b8:	28 22 00 00 	lw r2,(r1+0)
 3bc:	28 41 00 00 	lw r1,(r2+0)
 3c0:	20 21 00 01 	andi r1,r1,0x1
 3c4:	44 20 ff fe 	be r1,r0,3bc <uart_getchar+0x10>
    return uart0->rxtx;
 3c8:	28 41 00 04 	lw r1,(r2+4)
}
 3cc:	20 21 00 ff 	andi r1,r1,0xff
 3d0:	c3 a0 00 00 	ret

000003d4 <uart_putchar>:

void uart_putchar(char c)
{
    while (uart0->ucr & UART_BUSY) ;
 3d4:	78 03 00 00 	mvhi r3,0x0
 3d8:	38 63 04 e8 	ori r3,r3,0x4e8
 3dc:	28 62 00 00 	lw r2,(r3+0)
{
 3e0:	20 21 00 ff 	andi r1,r1,0xff
    while (uart0->ucr & UART_BUSY) ;
 3e4:	28 43 00 00 	lw r3,(r2+0)
 3e8:	28 62 00 00 	lw r2,(r3+0)
 3ec:	20 42 00 10 	andi r2,r2,0x10
 3f0:	5c 40 ff fe 	bne r2,r0,3e8 <uart_putchar+0x14>
    uart0->rxtx = c;
 3f4:	58 61 00 04 	sw (r3+4),r1
}
 3f8:	c3 a0 00 00 	ret

000003fc <uart_putstr>:

void uart_putstr(char *str)
{
    char *c = str;
    while(*c) {
 3fc:	40 24 00 00 	lbu r4,(r1+0)
 400:	44 80 00 0c 	be r4,r0,430 <uart_putstr+0x34>
    while (uart0->ucr & UART_BUSY) ;
 404:	78 03 00 00 	mvhi r3,0x0
 408:	38 63 04 ec 	ori r3,r3,0x4ec
 40c:	28 62 00 00 	lw r2,(r3+0)
 410:	28 43 00 00 	lw r3,(r2+0)
 414:	28 62 00 00 	lw r2,(r3+0)
 418:	20 42 00 10 	andi r2,r2,0x10
 41c:	5c 40 ff fe 	bne r2,r0,414 <uart_putstr+0x18>
    uart0->rxtx = c;
 420:	58 64 00 04 	sw (r3+4),r4
        uart_putchar(*c);
        c++;
 424:	34 21 00 01 	addi r1,r1,1
    while(*c) {
 428:	40 24 00 00 	lbu r4,(r1+0)
 42c:	5c 80 ff fa 	bne r4,r0,414 <uart_putstr+0x18>
    }
}
 430:	c3 a0 00 00 	ret

00000434 <readGpio>:
***************************************************************************
*/

uint32_t readGpio()
{
return gpio0->in;
 434:	78 02 00 00 	mvhi r2,0x0
 438:	38 42 04 f0 	ori r2,r2,0x4f0
 43c:	28 41 00 00 	lw r1,(r2+0)
 440:	28 21 00 00 	lw r1,(r1+0)
 444:	28 21 00 04 	lw r1,(r1+4)
}
 448:	c3 a0 00 00 	ret

0000044c <writeGpio>:

void writeGpio(uint32_t data)
{
gpio0->out = data;
 44c:	78 03 00 00 	mvhi r3,0x0
 450:	38 63 04 f4 	ori r3,r3,0x4f4
 454:	28 62 00 00 	lw r2,(r3+0)
 458:	28 42 00 00 	lw r2,(r2+0)
 45c:	58 41 00 00 	sw (r2+0),r1
}
 460:	c3 a0 00 00 	ret

00000464 <getdato>:

/*TECLADO*/

uint32_t getdato(){
return teclado0->dato;
 464:	78 02 00 00 	mvhi r2,0x0
 468:	38 42 04 f8 	ori r2,r2,0x4f8
 46c:	28 41 00 00 	lw r1,(r2+0)
 470:	28 21 00 00 	lw r1,(r1+0)
 474:	28 21 00 00 	lw r1,(r1+0)
};
 478:	c3 a0 00 00 	ret

0000047c <irq_handler>:
/*INTERRUPCIONES*/
void irq_handler(uint32_t pending)
{   
  int i;
  i=pending & 16;  //Rescata el bit al cu√°l le quiero meter la interrupci√≥n.   10010&10000=10000
 47c:	20 21 00 10 	andi r1,r1,0x10
    if (i==16){
 480:	44 20 00 0b 	be r1,r0,4ac <irq_handler+0x30>
return teclado0->dato;
 484:	78 02 00 00 	mvhi r2,0x0
 488:	38 42 04 fc 	ori r2,r2,0x4fc
 48c:	28 41 00 00 	lw r1,(r2+0)
gpio0->out = data;
 490:	78 03 00 00 	mvhi r3,0x0
 494:	38 63 05 00 	ori r3,r3,0x500
return teclado0->dato;
 498:	28 22 00 00 	lw r2,(r1+0)
gpio0->out = data;
 49c:	28 61 00 00 	lw r1,(r3+0)
return teclado0->dato;
 4a0:	28 42 00 00 	lw r2,(r2+0)
gpio0->out = data;
 4a4:	28 21 00 00 	lw r1,(r1+0)
 4a8:	58 22 00 00 	sw (r1+0),r2
  uint32_t  a;
   a=getdato();  //lee dato del teclado
   writeGpio(a); //escribe dato en GPIO
   }
  
}
 4ac:	c3 a0 00 00 	ret
